#N canvas 949 -11 1920 1016 12;
#X obj 22 137 s2, f 6;
#X obj 88 138 s2, f 6;
#X obj 159 138 s2, f 6;
#X obj 35 55 metro 1500;
#X obj 35 79 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 35 6 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 104 18 500;
#X msg 71 5 750;
#X msg 146 16 100;
#X msg 66 116 0;
#X msg 149 107 1;
#X obj 179 166 t f f;
#X msg 9 108 1;
#X obj 107 169 t f f;
#X obj 41 169 t f f;
#X text 480 2 vill hitta ett sätt där jag skickar både fram och tilbaka men bara använder en. men också på ett sätt där jag inte bara skickar tillbaka ett steg \, kan vi göra villkor i varje led? typ routa rätt? typ ifbreak använd db ist för df? sätta b =3 s=4 fästa till typ spigot;
#X obj 210 138 s2, f 6;
#X obj 276 139 s2, f 6;
#X obj 347 139 s2, f 6;
#X obj 367 167 t f f;
#X obj 295 170 t f f;
#X obj 229 170 t f f;
#X obj 50 193 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 116 193 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 172 196 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 236 196 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 301 197 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 359 195 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X msg 247 105 0;
#X msg 319 117 1;
#X obj 79 388 s2, f 6;
#X obj 145 389 s2, f 6;
#X obj 216 389 s2, f 6;
#X obj 46 306 metro 1500;
#X obj 46 330 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 46 257 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 113 255 500;
#X msg 82 256 750;
#X msg 144 255 100;
#X obj 230 423 t f f;
#X msg 46 354 1;
#X obj 158 419 t f f;
#X obj 92 419 t f f;
#X obj 92 453 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 158 454 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 230 455 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 280 392 s2, f 6;
#X obj 351 392 s2, f 6;
#X obj 364 421 t f f;
#X obj 293 422 t f f;
#X obj 293 457 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 364 458 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X text 480 80 in: df \, clk \, reset(b0 \, s1) \, mode (b3 \, 4s) \, db out: lamp \, df \, clk \, db;
#X msg 150 329 0;
#X msg 185 328 1;
#X msg 225 328 3;
#X msg 259 328 4;
#X text 478 115 Sekvens: bssbs;
#X obj 390 354 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 79 348 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 477 136 Första är break och där kopplar vi metron direkt till clk \, stämmer detta med mitt upplägg? Är inte riktigt så jag har ställt upp det... vad blir skillnaden? här sätter jag in det clk direkt vilket jag bara ska göra om den är en shift \, så första steget är lite speciellt. Kan vi göra ett villkor där vi i första använder clk som clk? hur läser jag det? koppla då clk till df???;
#X text 478 238 varför funkar inte min implementation \, fan vad hag blir galen \, vad blev fel \, sluta göra allt så stort.;
#X obj 483 338 s2, f 8;
#X obj 553 338 s2, f 8;
#X obj 620 338 s2, f 8;
#X msg 512 292 0;
#X msg 547 291 1;
#X msg 587 291 3;
#X msg 621 291 4;
#X msg 454 293 1;
#X obj 483 398 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 553 400 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 620 401 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 440 363 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 690 338 s2, f 8;
#X obj 690 400 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 760 337 s2, f 8;
#X obj 827 337 s2, f 8;
#X obj 760 399 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 827 400 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X obj 894 337 s2, f 8;
#X obj 894 399 tgl 25 0 empty empty empty 0 -10 0 12 #c6feff #000000 #000000 0 1;
#X connect 0 1 14 0;
#X connect 0 2 1 1;
#X connect 1 1 13 0;
#X connect 1 2 2 1;
#X connect 2 1 11 0;
#X connect 3 0 4 0;
#X connect 4 0 12 0;
#X connect 5 0 3 0;
#X connect 6 0 3 1;
#X connect 7 0 3 1;
#X connect 8 0 3 1;
#X connect 9 0 0 2;
#X connect 10 0 2 2;
#X connect 10 0 1 2;
#X connect 11 0 24 0;
#X connect 11 1 16 1;
#X connect 11 1 0 0;
#X connect 12 0 0 1;
#X connect 13 0 23 0;
#X connect 13 1 2 0;
#X connect 14 0 22 0;
#X connect 14 1 1 0;
#X connect 16 1 21 0;
#X connect 16 2 17 1;
#X connect 17 1 20 0;
#X connect 17 2 18 1;
#X connect 18 1 19 0;
#X connect 19 0 27 0;
#X connect 19 1 16 0;
#X connect 20 0 26 0;
#X connect 20 1 18 0;
#X connect 21 0 25 0;
#X connect 21 1 17 0;
#X connect 28 0 16 2;
#X connect 29 0 17 2;
#X connect 29 0 18 2;
#X connect 30 1 42 0;
#X connect 30 2 31 1;
#X connect 31 1 41 0;
#X connect 31 2 32 1;
#X connect 31 3 30 4;
#X connect 32 1 39 0;
#X connect 32 2 46 1;
#X connect 32 3 31 4;
#X connect 33 0 34 0;
#X connect 34 0 40 0;
#X connect 35 0 33 0;
#X connect 36 0 33 1;
#X connect 37 0 33 1;
#X connect 38 0 33 1;
#X connect 39 0 45 0;
#X connect 39 1 46 0;
#X connect 40 0 30 0;
#X connect 40 0 69 0;
#X connect 41 0 44 0;
#X connect 41 1 32 0;
#X connect 42 0 43 0;
#X connect 42 1 31 0;
#X connect 46 1 49 0;
#X connect 46 2 47 1;
#X connect 46 3 32 4;
#X connect 47 1 48 0;
#X connect 47 3 46 4;
#X connect 48 0 51 0;
#X connect 49 0 50 0;
#X connect 49 1 47 0;
#X connect 53 0 30 2;
#X connect 53 0 46 2;
#X connect 54 0 31 2;
#X connect 54 0 32 2;
#X connect 54 0 47 2;
#X connect 55 0 30 3;
#X connect 55 0 46 3;
#X connect 56 0 31 3;
#X connect 56 0 32 3;
#X connect 56 0 47 3;
#X connect 58 0 47 4;
#X connect 59 0 30 4;
#X connect 62 0 70 0;
#X connect 62 1 63 0;
#X connect 62 2 63 1;
#X connect 63 0 71 0;
#X connect 63 1 64 0;
#X connect 63 2 64 1;
#X connect 63 3 62 4;
#X connect 64 0 72 0;
#X connect 64 1 74 0;
#X connect 64 2 74 1;
#X connect 64 3 63 4;
#X connect 65 0 62 2;
#X connect 65 0 74 2;
#X connect 65 0 80 2;
#X connect 66 0 63 2;
#X connect 66 0 64 2;
#X connect 66 0 76 2;
#X connect 66 0 77 2;
#X connect 67 0 62 3;
#X connect 67 0 74 3;
#X connect 67 0 80 3;
#X connect 68 0 63 3;
#X connect 68 0 64 3;
#X connect 68 0 76 3;
#X connect 68 0 77 3;
#X connect 69 0 62 0;
#X connect 73 0 62 4;
#X connect 74 0 75 0;
#X connect 74 1 76 0;
#X connect 74 2 76 1;
#X connect 74 3 64 4;
#X connect 76 0 78 0;
#X connect 76 1 77 0;
#X connect 76 2 77 1;
#X connect 76 3 74 4;
#X connect 77 0 79 0;
#X connect 77 1 80 0;
#X connect 77 2 80 1;
#X connect 77 3 76 4;
#X connect 80 0 81 0;
#X connect 80 3 77 4;
